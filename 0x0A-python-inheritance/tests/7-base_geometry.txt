------------------------------------------

      Base Geometry Test File

++++++++++++++++++++++++++++++++++++++++++

This is a test file for the 7-base_geometry module

++++++++++++++++++++++++++++++++++++++++++                 
 7-base_geometry - class
 area()
 integer_validator()

------------------------------------------
Import the class required for testing from the module   
    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry                                                     

Start testing with some different inputs

#Create an instance
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("my_int", 12)
    >>> bg.integer_validator("width", 89)

    >>> try:
    ...     bg.integer_validator("name", "John")
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer

    >>> try:
    ...     bg.integer_validator("age", 0)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [ValueError] age must be greater than 0

    >>> try:
    ...     bg.integer_validator("distance", -4)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [ValueError] distance must be greater than 0

#Test for calling area method
    >>> try:
    ...     bg.area()
    ... except Exception as e:
    ...     print(e)
    area() is not implemented

#Test for calling validator with empty arguments
    >>> try:
    ...     bg.integer_validator()
    ... except Exception as e:
    ...     print(e)
    integer_validator() missing 2 required positional arguments: 'name' and 'value'

#Test for calling int validator with one argument
    >>> try:
    ...     bg.integer_validator("age")
    ... except Exception as e:
    ...     print(e)
    integer_validator() missing 1 required positional argument: 'value'

#Test for calling int validator with two correct arg
    >>> bg.integer_validator("age", 1)

#Test for calling int validator with 0 as second arg
    >>> try:
    ...     bg.integer_validator("age", 0)
    ... except Exception as e:
    ...     print(e)
    age must be greater than 0

#Test for calling int validator with negative int as second arg
    >>> try:
    ...     bg.integer_validator("age", -4)
    ... except Exception as e:
    ...     print(e)
    age must be greater than 0


#Test for calling int validator with string as second arg
    >>> try:
    ...     bg.integer_validator("age", "4")
    ... except Exception as e:
    ...     print(e)
    age must be an integer


#Test for calling int validator with tuple as second arg
    >>> try:
    ...     bg.integer_validator("age", (2,))
    ... except Exception as e:
    ...     print(e)
    age must be an integer


#Test for calling int validator with list as second arg
    >>> try:
    ...     bg.integer_validator("age", [3])
    ... except Exception as e:
    ...     print(e)
    age must be an integer


#Test for calling int validator with bool as second arg
    >>> try:
    ...     bg.integer_validator("age", True)
    ... except Exception as e:
    ...     print(e)
    age must be an integer


#Test for calling int validator with dictionary as second arg
    >>> try:
    ...     bg.integer_validator("age", {3, 4})
    ... except Exception as e:
    ...     print(e)
    age must be an integer

#Test for calling int validator with None as second arg
    >>> try:
    ...     bg.integer_validator("age", None)
    ... except Exception as e:
    ...     print(e)
    age must be an integer
